<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/io/2021/11/30/hello-world/"/>
      <url>/io/2021/11/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring5</title>
      <link href="/io/2021/04/13/Spring5/"/>
      <url>/io/2021/04/13/Spring5/</url>
      
        <content type="html"><![CDATA[<p><strong>文中若有错误或者问题请在评论区留言</strong></p><h3 id="一，Spring框架概述"><a href="#一，Spring框架概述" class="headerlink" title="一，Spring框架概述"></a>一，Spring框架概述</h3><ol><li><p>Spring是轻量级的开源的JavaEE框架</p></li><li><p>Spring可以解决企业应用开发的复杂性</p></li><li><p>Spring有两个核心部分：IOC和Aop</p><ul><li>IOC：控制反转，把创建对象过程交给Spring进行管理</li><li>Aop：面向切面，不修改源代码进行功能增强</li></ul></li><li><p>Spring特点</p><ul><li>方便解耦，简化开发</li><li>Aop编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li></ul></li></ol><h3 id="二，IOC容器"><a href="#二，IOC容器" class="headerlink" title="二，IOC容器"></a>二，IOC容器</h3><h4 id="1，IOC底层原理"><a href="#1，IOC底层原理" class="headerlink" title="1，IOC底层原理"></a>1，IOC底层原理</h4><p>​        <strong>IOC概念和原理</strong></p><p>​        （1）什么是IOC</p><p>​                控制反转，把对象创建和对象之间的调用过程交给Spring进行管理</p><p>​                使用IOC目的：为了耦合度降低</p><p>​        （2）IOC底层原理</p><p>​                xml解析，工厂模式，反射</p><h4 id="2，IOC接口（BeanFactory"><a href="#2，IOC接口（BeanFactory" class="headerlink" title="2，IOC接口（BeanFactory)"></a>2，IOC接口（BeanFactory)</h4><p>​        （1）IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>​        （2）Spring提供IOC容器实现两种方式（两个接口）：</p><p>​                BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用（加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象）；</p><p>​                ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用（加载配置文件的时候就把配置文件的对象进行创建）</p><p>​        （3）ApplicationContext接口有实现类</p><p>​            例：</p><p>​            ⅰ，book类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">&quot;::&quot;</span>+bauthor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        ⅱ，配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    set方法注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.Book&quot;</span>&gt;</span><br><span class="line">&lt;!--        使用property完成属性注入</span><br><span class="line">              name：类里面属性名称</span><br><span class="line">              value：向属性注入的值</span><br><span class="line">              --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bname&quot;</span> value=<span class="string">&quot;易筋经&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bauthor&quot;</span> value=<span class="string">&quot;达摩老祖&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        ⅲ，测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBook1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1,加载spring配置文件</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        2,获取配置创建的对象</span></span><br><span class="line">        Book book = context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        book.testDemo();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        ⅳ，输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.spring5.Book@557caf28</span><br><span class="line">易筋经::达摩老祖</span><br></pre></td></tr></table></figure><h4 id="3，IOC操作Bean管理"><a href="#3，IOC操作Bean管理" class="headerlink" title="3，IOC操作Bean管理"></a>3，IOC操作Bean管理</h4><p>（1）什么是Bean管理</p><h5 id="Bean管理指的是两个操作："><a href="#Bean管理指的是两个操作：" class="headerlink" title="Bean管理指的是两个操作："></a>Bean管理指的是两个操作：</h5><p>​            Spring创建对象</p><p>​            Spring注入属性</p><p>（2）Bean管理操作有两种方式</p><h5 id="基于xml配置文件方式实现"><a href="#基于xml配置文件方式实现" class="headerlink" title="基于xml配置文件方式实现"></a>基于xml配置文件方式实现</h5><h6 id="①基于xml方式创建对象"><a href="#①基于xml方式创建对象" class="headerlink" title="①基于xml方式创建对象"></a>①基于xml方式创建对象</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置User对象创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;user&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.User&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​                ⅰ在Spring配置文件中，使用bean标签，标签里面添加相应属性，就可以实现对象创建；</p><p>​                ⅱ在bean标签有很多属性，介绍常用的属性</p><p>​                        id：唯一标识</p><p>​                        class：类全路径（包类路径）</p><p>​                ⅲ创建对象时候，默认执行无参数构造方法完成对象创建</p><h6 id="②基于xml方式注入属性"><a href="#②基于xml方式注入属性" class="headerlink" title="②基于xml方式注入属性"></a>②基于xml方式注入属性</h6><p>​                DI：依赖注入，就是注入属性</p><p>​                    第一种注入方式：<strong>使用set方法进行注入</strong></p><p>​                        ㈠创建类，定义属性，创建属性对应的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">&quot;::&quot;</span>+bauthor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                    ㈡在spring配置文件配置对象创建，配置属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    set方法注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.Book&quot;</span>&gt;</span><br><span class="line">&lt;!--        使用property完成属性注入</span><br><span class="line">              name：类里面属性名称</span><br><span class="line">              value：向属性注入的值</span><br><span class="line">              --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bname&quot;</span> value=<span class="string">&quot;易筋经&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bauthor&quot;</span> value=<span class="string">&quot;达摩老祖&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        </p><p>​        第二种注入方式：<strong>使用有参数构造进行注入</strong></p><p>​            ㈠创建类，定义属性，创建属性对应有参数构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        ㈡在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    有参数构造注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;orders&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.Orders&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;oname&quot;</span> value=<span class="string">&quot;电脑&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;China&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    p名称空间注入（了解）</p><p>​        第一步，添加p名称空间在配置文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>   &lt;!--    此行添加--&gt;</span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>​        第二步，进行属性注入，在bean标签里面添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.Book&quot;</span> p:bname=<span class="string">&quot;九阳神功&quot;</span> p:bauthor=<span class="string">&quot;无名氏&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h6 id="IOC操作Bean管理（xml注入其他类型属性）"><a href="#IOC操作Bean管理（xml注入其他类型属性）" class="headerlink" title="IOC操作Bean管理（xml注入其他类型属性）"></a>IOC操作Bean管理（xml注入其他类型属性）</h6><p>​    ㈠字面量</p><p>​        ①null值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--        <span class="keyword">null</span>值--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">null</span>/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br></pre></td></tr></table></figure><p>​        ②属性值包含特殊符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--        属性值包含特殊符号</span><br><span class="line">            <span class="number">1</span> 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="line">            <span class="number">2</span> 把带特殊符号内容写到CDATA</span><br><span class="line">            --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">            &lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br></pre></td></tr></table></figure><p>㈡注入属性——外部bean（通过service层去调用dao层，这个过程就叫做引入外部bean）</p><p>​        ①创建两个类service类和dao类</p><p>​            Service类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userService add...&quot;</span>);</span><br><span class="line">         userDao.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        原始创建userDao对象</span></span><br><span class="line"><span class="comment">//        UserDao userDao=new UserDaoImpl();</span></span><br><span class="line"><span class="comment">//        userDao.update();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            dao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userDao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        ②在service调用dao里的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;userService add...&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        ③在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    service 和dao对象创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.service.UserService&quot;</span>&gt;</span><br><span class="line">&lt;!--        注入userDao对象</span><br><span class="line">            name属性值：类里面属性名称</span><br><span class="line">            ref属性：创建userDao对象bean标签id值</span><br><span class="line">            --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDaoImpl&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDaoImpl&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.dao.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        ④测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1,加载spring配置文件</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        2,获取配置创建的对象</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        ⑤输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userService add...</span><br><span class="line">userDao update ...</span><br></pre></td></tr></table></figure><p>㈢注入属性——内部bean</p><p>​        ①一对多关系：部门和员工</p><p>​        ②在实体类之间表示一对多关系     员工属于某一个部门，使用对象形式表示</p><p>​            部门类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            员工类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"><span class="comment">//    员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        ③在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    内部bean--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Emp&quot;</span>&gt;</span><br><span class="line">&lt;!--        设置两个普通属性--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucky&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--设置对象类型属性--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dept&quot;</span>&gt;</span><br><span class="line">            &lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Dept&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;安保部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>㈣注入属性——级联赋值 </p><pre><code>     第一种写法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    级联赋值--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Emp&quot;</span>&gt;</span><br><span class="line">&lt;!--        设置两个普通属性--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucy&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        级联赋值--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Dept&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;财务部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        第二种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    级联赋值--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Emp&quot;</span>&gt;</span><br><span class="line">&lt;!--        设置两个普通属性--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucy&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        级联赋值--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dept.dname&quot;</span> value=<span class="string">&quot;技术部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.bean.Dept&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;财务部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h6 id="IOC操作Bean管理（xml注入集合属性）"><a href="#IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="IOC操作Bean管理（xml注入集合属性）"></a>IOC操作Bean管理（xml注入集合属性）</h6><p>​    ㈠注入数组类型属性</p><p>​    ㈡注入List集合类型属性</p><p>​    ㈢注入Map集合类型属性</p><p>​            ①创建类，定义数组，list，map，set类型属性，生成对应set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            ②在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    集合类型属性注入--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;stu&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.collectiontype.Stu&quot;</span>&gt;</span><br><span class="line">&lt;!--        数组类型属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;courses&quot;</span>&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;Java课程&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;数据库课程&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--        list类型属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;张三&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;小三&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--        map类型属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maps&quot;</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;JAVA&quot;</span> value=<span class="string">&quot;java&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;PHP&quot;</span> value=<span class="string">&quot;php&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--        set类型属性注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sets&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;MySQL&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Redis&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    ㈣在集合里面设置对象类型值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--        注入list集合类型，值是对象--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;courseList&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=<span class="string">&quot;course1&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">                &lt;ref bean=<span class="string">&quot;course2&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;!--创建多个course对象--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;course1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.collectiontype.Course&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;spring5框架&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;course2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.collectiontype.Course&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;MyBatis框架&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    ㈤把集合注入部分提取出来</p><p>​            ①在spring配置文件中引入名称空间util</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:util=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>​            ②使用util标签完成list集合注入提取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    <span class="number">1</span>，提取list集合类型属性注入--&gt;</span><br><span class="line">        &lt;util:list id=<span class="string">&quot;bookList&quot;</span>&gt;</span><br><span class="line">            &lt;value&gt;易筋经&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;九阴真经&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;九阳神功&lt;/value&gt;</span><br><span class="line">        &lt;/util:list&gt;</span><br><span class="line">&lt;!--    <span class="number">2</span>，使用--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.collectiontype.Book&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;list&quot;</span> ref=<span class="string">&quot;bookList&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h6 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h6><p>1，Spring有两种类型bean，一种普通bean，另外一种工厂bean（FactoryBean）</p><p>2，普通bean：在配置文件中定义bean类型就是返回类型</p><p>3，工厂bean：在配置文件中定义bean类型可以和返回类型不一样</p><p>​        使用：第一步创建类，让这个类作为工厂bean，实现接口FactoryBean</p><p>​                    第二步实现接口里面的方法，在实现的方法中定义返回的bean类型</p><h6 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h6><p>1，在Spring里面，设置创建bean实例是单实例还是多实例</p><p>2，在Spring里面，默认情况下，bean是单实例对象</p><p>3，如何设置单实例还是多实例</p><p>​    （1）在spring配置文件bean标签里面有属性（scope）用于设置单实例还是多实例</p><p>​    （2）scope属性值</p><p>​            第一个值    默认值，singleton，表示是单实例对象</p><p>​            第二个值    prototype，表示是多实例对象</p><p>​    （3）singleton和prototype区别</p><p>​            第一    singleton单实例，prototype多实例</p><p>​            第二    设置scope值是singleton的时候，当加载spring配置文件时就会创建单实例对象</p><p>​                        设置scope值是prototype的时候，不是在加载spring配置文件时创建对象，而是在调用getBean方法时创建多实例对象</p><p>​    （4）了解scope其他属性值</p><p>​            request</p><p>​            session</p><h6 id="IOC操作Bean管理（bean生命周期）"><a href="#IOC操作Bean管理（bean生命周期）" class="headerlink" title="IOC操作Bean管理（bean生命周期）"></a>IOC操作Bean管理（bean生命周期）</h6><p>1，生命周期：从对象创建到对象销毁的过程</p><p>2，bean生命周期</p><p>​    （1）通过构造器创建bean实例（无参数构造）</p><p>​    （2）为bean的属性设置值和对其他bean引用（调用set方法）</p><p>​    （3）调用bean的初始化方法（需要进行配置初始化的方法）</p><p>​    （4）bean可以使用了（对象获取到了）</p><p>​    （5）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</p><p>3，bean的后置处理器，bean生命周期有七步</p><p>​    （1）通过构造器创建bean实例（无参数构造）</p><p>​    （2）为bean的属性设置值和对其他bean引用（调用set方法）</p><p>​    <strong>（3）把bean实例传递bean后置处理器的方法</strong></p><p>​    （4）调用bean的初始化方法（需要进行配置初始化的方法）</p><p>​    <strong>（5）把bean实例传递bean后置处理器的方法</strong></p><p>​    （6）bean可以使用了（对象获取到了）</p><p>​    （7）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</p><h6 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h6><p>​    自动装配：根据指定装配规则（属性名称或者属性类型），spring自动将匹配的属性值进行注入</p><p>​    过程：</p><p>​        1，根据属性名称自动注入</p><p>​            bean标签属性autowire，配置自动装配</p><p>​            autowire属性常用两个值：byName根据属性名称注入，注入值bean的id值和类属性名称一样</p><p>​                                                           byType根据属性类型注入</p><p>​        2，根据属性类型自动注入</p><h6 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="IOC操作Bean管理（外部属性文件）"></a>IOC操作Bean管理（外部属性文件）</h6><pre><code> 1，直接配置数据库信息</code></pre><p>​        （1）配置德鲁伊连接池</p><p>​        （2）引入德鲁伊连接池依赖jia包</p><p>​    2，引入外部属性文件配置数据库连接池</p><p>​        （1）创建外部属性文件，properties格式文件，写数据库信息</p><p>​        （2）把外部properties属性文件引入到spring配置文件中</p><p>​                引入context名称空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>​            引入外部属性文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    引入外部属性文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>​            配置连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    配置连接池--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h5 id="基于注解方式实现"><a href="#基于注解方式实现" class="headerlink" title="基于注解方式实现"></a>基于注解方式实现</h5><p>1，什么是注解</p><p>​    （1）注解是代码特殊标记，格式：@注解名称（属性名称=属性值，属性名称=属性值…）</p><p>​    （2）使用注解，注解作用在类上面，方法上面，格式上面</p><p>​    （3）使用注解目的：简化xml配置</p><h6 id="2，Spring针对Bean管理中创建对象提供注解"><a href="#2，Spring针对Bean管理中创建对象提供注解" class="headerlink" title="2，Spring针对Bean管理中创建对象提供注解"></a>2，Spring针对Bean管理中创建对象提供注解</h6><p>​    （1）@Component</p><p>​    （2）@Service</p><p>​    （3）@Controller</p><p>​    （4）@Repository</p><p>  上面四个注解功能是一样的，都可以用来创建bean实例</p><h6 id="3，基于注解方式实现对象创建"><a href="#3，基于注解方式实现对象创建" class="headerlink" title="3，基于注解方式实现对象创建"></a>3，基于注解方式实现对象创建</h6><p>​    第一步引入aop依赖</p><p>​    第二步开启组件扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    开启组件扫描</span><br><span class="line">        <span class="number">1</span>，如果扫描多个包，包之间用逗号隔开</span><br><span class="line">        <span class="number">2</span>，扫描包上层目录--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>​    第三步 创建类，在类上面添加创建创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面value属性值可以省略不写，默认值是类名称，首字母小写 UserService=userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5?p=21">4，开启组件扫描细节配置</a></p><h6 id="5，基于注解方式实现属性注入"><a href="#5，基于注解方式实现属性注入" class="headerlink" title="5，基于注解方式实现属性注入"></a>5，基于注解方式实现属性注入</h6><p>​    （1）@Autowired：根据属性类型进行自动装配</p><p>​            第一步    把service和dao对象创建，在service和dao类添加创建对象注释</p><p>​            第二步    在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    定义dao类型属性，不需要添加set方法，添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book add...&quot;</span>);</span><br><span class="line">        bookDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （2）@Qualifier：根据属性名称进行注入</p><p>​            这个@Qualifier注解的使用，和上面@Autowired一起使用</p><p>​                接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;bookDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bookDao add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                Service类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    定义dao类型属性，不需要添加set方法，添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;bookDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book add...&quot;</span>);</span><br><span class="line">        bookDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （3）@Resource：可以根据类型注入，也可以根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @Resource //根据类型进行注入</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;bookDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br></pre></td></tr></table></figure><p>​    （4）@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h6 id="6，完全注解开发"><a href="#6，完全注解开发" class="headerlink" title="6，完全注解开发"></a>6，完全注解开发</h6><p>​    （1）创建配置类，代替xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，代替xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.spring5&quot;&#125;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （2）编写测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//加载配置类</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        BookService bookService = context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">        bookService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三，AOP"><a href="#三，AOP" class="headerlink" title="三，AOP"></a>三，AOP</h3><h4 id="1，什么是AOP"><a href="#1，什么是AOP" class="headerlink" title="1，什么是AOP"></a>1，什么是AOP</h4><p>​        （1）面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>​        （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p><h4 id="2，AOP底层原理"><a href="#2，AOP底层原理" class="headerlink" title="2，AOP底层原理"></a>2，AOP底层原理</h4><p>​        （1）AOP底层使用动态代理</p><p>​            ①有两种情况使用动态代理</p><p>​                第一种    有接口情况，使用JDK动态代理</p><p>​                    创建接口实现类代理对象，增强类的方法</p><p>​                第二种    没有接口情况，使用CGLIB动态代理</p><p>​                    创建子类的代理对象，增强类的方法</p><h4 id="3，JDK动态代理"><a href="#3，JDK动态代理" class="headerlink" title="3，JDK动态代理"></a>3，JDK动态代理</h4><p>​        （1）使用JDK动态代理，使用Proxy类里面的方法创建代理对象</p><p>​            ①调用newProxyInstance方法</p><p>​                该方法有三个参数：</p><p>​                    第一个参数，类加载器</p><p>​                    第二个参数，增强方法所在的类，这个类实现的接口，支持多个接口</p><p>​                    第三个参数，实现这个接口InvocationHandler，创建代理对象，写增强的方法</p><p>​        （2）使用Proxy类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces=&#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao=<span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行...&quot;</span>+method.getName()+<span class="string">&quot;:传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span>+obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4，AOP术语"><a href="#4，AOP术语" class="headerlink" title="4，AOP术语"></a>4，AOP术语</h4><p>​    （1）连接点</p><p>​            类里面哪些方法可以被增强，这些方法称为连接点</p><p>​    （2）切入点</p><p>​            实际被真正增强的方法，称为切入点</p><p>​    （3）通知（增强）</p><p>​            ①实际增强的逻辑部分称为通知（增强）</p><p>​            ②通知（增强）有多种类型：前置通知，后置通知，环绕通知，异常通知，最终通知</p><p>​    （4）切面</p><p>​            是动作</p><p>​            ①把通知应用到切入点过程</p><h4 id="5，AOP操作（准备）"><a href="#5，AOP操作（准备）" class="headerlink" title="5，AOP操作（准备）"></a>5，AOP操作（准备）</h4><p>​    （1）Spring框架一般都是基于AspectJ实现AOP操作</p><p>​            AspectJ：AspectJ不是Spring组成部分，是一个独立的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p><p>​    （2）基于AspectJ实现AOP操作</p><p>​            ①基于xml配置文件实现</p><p>​            ②基于注解方式实现（使用）</p><p>​    （3）在项目工程里面引入AOP相关依赖</p><p>​    （4）切入点表达式</p><p>​            ①切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p><p>​            ②语法结构：execution(【权限修饰符】【返回类型】【类全路径】【方法名称]】(【参数列表】))</p><p>​                举例：对com.spring.BookDao类里面的所以方法进行增强    execution(*  com.spring.BookDao.*(..))</p><h4 id="6，AOP操作（AspectJ注解）"><a href="#6，AOP操作（AspectJ注解）" class="headerlink" title="6，AOP操作（AspectJ注解）"></a>6，AOP操作（AspectJ注解）</h4><p>​    （1）创建类，在类里面定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （2）创建增强类（编写增强逻辑）</p><p>​            在增强类里面创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （3）进行通知的配置</p><p>​            ①在spring配置文件中，开启注解扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    开启注解扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5.aopanno&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>​            ②使用注解创建User和UserProxy对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            ③在增强类上面添加注解@Aspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            ④在Spring配置文件中开启生成代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    开启Aspect生成代理对象--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><p>​    （4）配置不同类型的通知</p><pre><code>     ①在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置通知,Before注解导的是AspectJ的包</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知(返回通知)</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    （5）相同的切入点抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同的切入点抽取</span></span><br><span class="line">   <span class="meta">@Pointcut(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//前置通知,Before注解导的是AspectJ的包</span></span><br><span class="line">   <span class="meta">@Before(value = &quot;point()&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​    （6）有多个增强类对同一个方法进行增强，设置增强类优先级</p><p>​            ①在增强类上面添加注解@Order（数字类型值），数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （7）完全使用注解开发</p><p>​        创建配置类，不需要创建xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.spring5&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAop</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7，AOP操作（AspectJ配置文件）"><a href="#7，AOP操作（AspectJ配置文件）" class="headerlink" title="7，AOP操作（AspectJ配置文件）"></a>7，AOP操作（AspectJ配置文件）</h4><p>（1）创建两个类，增强类和被增强类，创建方法</p><p>（2）在spring配置文件中创建两个类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.aopxml.Book&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;bookProxy&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.spring5.aopxml.BookProxy&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>（3）在spring配置文件中配置切入点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    配置aop增强--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">&lt;!--        切入点--&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;p&quot;</span> expression=<span class="string">&quot;execution(* com.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br><span class="line">&lt;!--        配置切面--&gt;</span><br><span class="line">        &lt;aop:aspect ref=<span class="string">&quot;bookProxy&quot;</span>&gt;</span><br><span class="line">&lt;!--            增强作用在具体的方法上--&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;p&quot;</span>&gt;&lt;/aop:before&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h3 id="四，JdbcTemplate"><a href="#四，JdbcTemplate" class="headerlink" title="四，JdbcTemplate"></a>四，JdbcTemplate</h3><h4 id="1，概念和准备"><a href="#1，概念和准备" class="headerlink" title="1，概念和准备"></a>1，概念和准备</h4><p>​    （1）概念：是Spring框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库操作</p><p>​    （2）准备工作</p><p>​            ①引入相关的jar包</p><p>​            ②在spring配置文件中配置数据库连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    配置连接池--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> destroy-method=<span class="string">&quot;close&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/user_db&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;010116&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        ③配置JdbcTemplate对象，注入DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    JdbcTemplate对象--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">&lt;!--        注入dataSource--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​        ④创建Service类，创建dao类，在dao中注入JdbcTemplate对象</p><p>​            配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    组件扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>​            Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao1;</span><br></pre></td></tr></table></figure><p>​            dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br></pre></td></tr></table></figure><h4 id="2，JdbcTemplate操作数据库"><a href="#2，JdbcTemplate操作数据库" class="headerlink" title="2，JdbcTemplate操作数据库"></a>2，JdbcTemplate操作数据库</h4><h5 id="（1）添加"><a href="#（1）添加" class="headerlink" title="（1）添加"></a>（1）添加</h5><p>①对应数据库创建实体类</p><p>②编写Service和dao</p><p>​    ⅰ在dao进行数据库添加操作</p><p>​    ⅱ调用JdbcTemplate对象里面update方法实现添加操作</p><p>③测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean9.xml&quot;</span>);</span><br><span class="line">       BookService_J bookService_j = context.getBean(<span class="string">&quot;bookService_J&quot;</span>, BookService_J.class);</span><br><span class="line"></span><br><span class="line">       Book book=<span class="keyword">new</span> Book();</span><br><span class="line">       book.setUserid(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       book.setUsername(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       book.setUstatus(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">       bookService_j.addBook(book);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="（2）修改和删除"><a href="#（2）修改和删除" class="headerlink" title="（2）修改和删除"></a>（2）修改和删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">       String sql=<span class="string">&quot;update t_book set username=?,user_status where user_id=?&quot;</span>;</span><br><span class="line">       Object[] args=&#123;book.getUsername(),book.getUstatus(),book.getUserid()&#125;;</span><br><span class="line">       <span class="keyword">int</span> update = jdbcTemplate.update(sql, args);</span><br><span class="line">       System.out.println(update);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//删除</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">       String sql=<span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line">       <span class="keyword">int</span> update = jdbcTemplate.update(sql, id);</span><br><span class="line">       System.out.println(update);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="（3）查询"><a href="#（3）查询" class="headerlink" title="（3）查询"></a>（3）查询</h5><p>①查询返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询表记录数</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">selectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String sql=<span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>②查询返回对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">findBookInfo</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from t_book where user_id=?&quot;</span>;</span><br><span class="line"><span class="comment">//      RowMapper是接口,针对不同返回值类型,使用这个接口里面实现类完成数据封装</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class),id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>③查询返回集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String sql=<span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> jdbcTemplate.query(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="（4）批量操作"><a href="#（4）批量操作" class="headerlink" title="（4）批量操作"></a>（4）批量操作</h5><p>①批量添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean9.xml&quot;</span>);</span><br><span class="line">        BookService_J bookService_j = context.getBean(<span class="string">&quot;bookService_J&quot;</span>, BookService_J.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Object[]&gt; batchArgs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Object[] o1=&#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;MySQL&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">        Object[] o2=&#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;Redis&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        Object[] o3=&#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;C++&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        batchArgs.add(o1);</span><br><span class="line">        batchArgs.add(o2);</span><br><span class="line">        batchArgs.add(o3);</span><br><span class="line">        bookService_j.batchAdd(batchArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>②批量修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;update t_book set username=?,user_status=? where user_id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean9.xml&quot;</span>);</span><br><span class="line">        BookService_J bookService_j = context.getBean(<span class="string">&quot;bookService_J&quot;</span>, BookService_J.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Object[]&gt; batchArgs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Object[] o1=&#123;<span class="string">&quot;MySQL&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        Object[] o2=&#123;<span class="string">&quot;Redis&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">        Object[] o3=&#123;<span class="string">&quot;C++&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">        batchArgs.add(o1);</span><br><span class="line">        batchArgs.add(o2);</span><br><span class="line">        batchArgs.add(o3);</span><br><span class="line">        bookService_j.batchUpdate(batchArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>③批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchDeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean9.xml&quot;</span>);</span><br><span class="line">       BookService_J bookService_j = context.getBean(<span class="string">&quot;bookService_J&quot;</span>, BookService_J.class);</span><br><span class="line"></span><br><span class="line">       List&lt;Object[]&gt; batchArgs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Object[] o1=&#123;<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">       Object[] o2=&#123;<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">       batchArgs.add(o1);</span><br><span class="line">       batchArgs.add(o2);</span><br><span class="line">       bookService_j.batchDelete(batchArgs);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3，事务"><a href="#3，事务" class="headerlink" title="3，事务"></a>3，事务</h4><p>（1）概念：事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败</p><p>（2）事务四个特性（ACID)    </p><p>​    ①原子性</p><p>​    ②一致性</p><p>​    ③隔离性</p><p>​    ④持久性</p><h5 id="（3）Spring事务管理"><a href="#（3）Spring事务管理" class="headerlink" title="（3）Spring事务管理"></a>（3）Spring事务管理</h5><p>​    ①事务添加到JavaEE三层结构里面Service层（业务逻辑层）</p><p>​    ②在spring进行事务管理操作有两种方式：编程式事务管理和声明式事务管理</p><p>​    ③声明式事务管理</p><p>​        ⅰ基于注解方式</p><p>​        ⅱ基于xml配置文件方式</p><p>​    ④在spring进行声明式事务管理，底层使用AOP原理</p><p>​    ⑤spring事务管理API</p><p>​        提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><h6 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h6><p>​    ①在spring配置文件配置事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    创建事务管理器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">&lt;!--        注入数据源--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    ②在spring配置文件，开启事务注解</p><p>​        ⅰ在spring配置文件引入名称空间tx</p><p>​        ⅱ开启事务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    开启事务注解--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>&gt;&lt;/tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure><p>​    ③在Service类上面，或者Service类的方法上面添加事务注解</p><p>​        ⅰ@Transactional，这个注解添加到类上面，也可以添加到方法上面</p><p>​        ⅱ如果把这个注解添加到类上面，这个类里面的所有方法都添加事务</p><p>​        ⅲ如果把这个注解添加到方法上面，为这个方法添加事务</p><h6 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h6><p>​    注解@Transactional可以配置事务相关参数</p><p>①propagation：事务传播行为</p><p>​    ⅰ概念：多事务方法直接进行调用，这个过程中事务是如何进行管理的</p><p>​    ⅱspring事务传播行为有7种，其中两种如下：</p><p>​        REQUIRED：如果add方法本身有事务，调用update方法之后，update使用当前add方法里面的事务；若add没有事务，调用update以后，创建新事务</p><p>​        REQUIRED_NEW：使用add方法调用update方法，无论add是否有事务，都创建新的事务</p><p>②isolation：事务隔离级别</p><p>​    ⅰ事务中有一个特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性会产生很多问题</p><p>​    ⅱ有三个读问题：脏读，不可重复读，虚（幻）读</p><p>​        脏读：一个未提交的事务读取到另一个未提交事务的数据</p><p>​        不可重复读：一个未提交事务读取到另一个提交事务修改的数据</p><p>​        虚（幻）读：一个未提交事务读取到另一个提交事务添加的数据</p><p>​    ⅲ通过设置事务隔离级别，解决读问题</p><p>③timeout：超时时间</p><p>​    ⅰ概念：事务需要在一定时间内进行提交，如果不提交则进行回滚</p><p>​    ⅱ默认值是 -1，设置时间以秒为单位进行计算</p><p>④readOnly：是否只读</p><p>​    ⅰ读，查询操作；写：添加修改删除操作</p><p>​    ⅱreadOnly默认值false，表示可以查询，可以修改添加删除操作</p><p>​    ⅲ    设置readOnly值是true，只能查询</p><p>⑤rollbackFor：回滚</p><p>​    设置出现哪些异常进行事务回滚</p><p>⑥noRollbackFor：不回滚</p><p>​    设置出现哪些异常不进行事务回滚</p><h6 id="xml声明式事务管理"><a href="#xml声明式事务管理" class="headerlink" title="xml声明式事务管理"></a>xml声明式事务管理</h6><p> 在spring配置文件中进行配置</p><p>​    第一步    配置事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    创建事务管理器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">&lt;!--        注入数据源--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    第二步    配置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    配置通知--&gt;</span><br><span class="line">    &lt;tx:advice id=<span class="string">&quot;txadvice&quot;</span>&gt;</span><br><span class="line">&lt;!--        配置事务参数--&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">&lt;!--            指定哪种规则的方法上面添加事务--&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;accountMoney&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><p>​    第三步    配置切入点和切面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    配置切入点和切面--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">&lt;!--        配置切入点--&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;pt&quot;</span> expression=<span class="string">&quot;execution(* com.spring5.service.UserService.accountMoney(..))&quot;</span>/&gt;</span><br><span class="line">&lt;!--        配置切面--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">&quot;txadvice&quot;</span> pointcut-ref=<span class="string">&quot;pt&quot;</span>&gt;&lt;/aop:advisor&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h6 id="完全注解声明式事务管理"><a href="#完全注解声明式事务管理" class="headerlink" title="完全注解声明式事务管理"></a>完全注解声明式事务管理</h6><p>​    创建配置类，使用配置类代替xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.spring5&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/user_db?rewriteBatchedStatements=true&amp;useUnicode=true&amp;serverTimezone=GMT&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;010116&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五，Spring5框架新功能"><a href="#五，Spring5框架新功能" class="headerlink" title="五，Spring5框架新功能"></a>五，Spring5框架新功能</h3><p>1，整个spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p><p>2，spring5框架自带了通用的日志封装</p><p>​    （1）spring5已经移除Log4jConfigListener，官方建议使用Log4j2</p><p>​    （2）spring5框架整合Log4j2</p><p>​        第一步    引入jar包</p><p>​        第二步    创建log4j2.xml配置文件</p><h4 id="3，Spring5框架核心容器支持-Nullable注解"><a href="#3，Spring5框架核心容器支持-Nullable注解" class="headerlink" title="3，Spring5框架核心容器支持@Nullable注解"></a>3，Spring5框架核心容器支持@Nullable注解</h4><p>​    @Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回值可以为空，属性值可以为空，参数值可以为空</p><h4 id="4，Spring5核心容器支持函数式风格"><a href="#4，Spring5核心容器支持函数式风格" class="headerlink" title="4，Spring5核心容器支持函数式风格"></a>4，Spring5核心容器支持函数式风格</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    函数式风格创建对象，交给spring进行管理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建GenericApplicationContext对象</span></span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"><span class="comment">//        调用方法注册</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,()-&gt;<span class="keyword">new</span> User());</span><br><span class="line"><span class="comment">//        获取在spring注册的对象</span></span><br><span class="line">        User user = (User)context.getBean(<span class="string">&quot;com.spring5.test.User&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5，Spring5支持整合JUnit5"><a href="#5，Spring5支持整合JUnit5" class="headerlink" title="5，Spring5支持整合JUnit5"></a>5，Spring5支持整合JUnit5</h4><p>​    （1）整合JUint4</p><p>​        第一步    引入spring相关针对测试依赖</p><p>​        第二步    创建测试类，使用注解方式完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//单元测试框架版本</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean10.xml&quot;)</span> <span class="comment">//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）Spring5整合JUnit5</p><p>​    第一步    引入JUnit5的jar包</p><p>​    第二步    创建测试类，使用注解方式完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean10.xml&quot;)</span> <span class="comment">//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）使用一个复合注解替代上面两个注解完成整合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean10.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6，SpringWebflux"><a href="#6，SpringWebflux" class="headerlink" title="6，SpringWebflux"></a>6，SpringWebflux</h4><h5 id="（1）SpringWebflux介绍"><a href="#（1）SpringWebflux介绍" class="headerlink" title="（1）SpringWebflux介绍"></a>（1）SpringWebflux介绍</h5><p>​    ①是Spring5新添加的模块，用于web开发的，功能和SpringMVC类似，Webflux使用当前一种比较流行的响应式编程出现的框架</p><p>​    ②使用传统web框架，比如SpringMVC，这些基于Servlet容器，Webflux是一种异步非阻塞的框架，异步非阻塞的框架在servlet3.1以后才支持，核心是基于Reactor的相关API实现的</p><p>​    ③解释什么是异步非阻塞</p><p>​        异步和同步，阻塞和非阻塞，都是针对对象不一样而决定</p><p>​        异步和同步针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，否则就是异步</p><p>​        阻塞和非阻塞针对被调用者，被调用者收到请求以后，马上给出反馈是非阻塞，否则就是阻塞</p><p>​    ④Webflux特点：</p><p>​        第一    非阻塞式：在有限资源下，提高系统吞吐量和伸缩性，以Reactor为基础实现响应式编程</p><p>​        第二    函数式编程：Spring5框架基于Java8，Webflux使用Java8函数式编程方式实现路由请求</p><p>​    ⑤和SpringMVC比较</p><p>​        第一    两个框架都可以使用注解方式，都运行在tomcat等容器中</p><p>​        第二    SpringMVC采用命令式编程，Webflux采用异步响应式编程</p><h5 id="（2）响应式编程"><a href="#（2）响应式编程" class="headerlink" title="（2）响应式编程"></a>（2）响应式编程</h5><p>​    ①什么是响应式编程？</p><p>​        响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。        电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似”=B1+C1”的公式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p><p>​    ②Java8及其之前版本实现响应式编程</p><p>​        提供的观察者模式两个类Observer和Observable</p><p>​    <strong>③Reactor实现响应式编程</strong></p><p>​        ⅰ响应式编程操作中，Reactor是满足Reactive规范框架</p><p>​        ⅱReactor有两个核心类，Mono和Flux，这两个类实现接口Publisher，提供丰富操作符。Flux对象实现发布者，返回N个元素；Mono实现发布者，返回0或者1个元素</p><p>​        ⅲMono和Flux都是数据流的发布者，使用Mono和Flux都可以发出三种数据信号：元素值，错误信号，完成信号，错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号会把终止数据流同时把错误信息传递给订阅者</p><p>​        ⅳ三种信号特点</p><p>​            错误信号和完成信号都代表终止信号，二者不能共存</p><p>​            如果没有发送任何元素值，而是直接发送错误或者完成信号，表示是空数据流</p><p>​            如果没有错误信号，没有完成信号，表示是无限数据流</p><p>​        ⅴ调用just或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生</p><p>​        ⅵ操作符</p><p>​            对数据流进行一道道操作，比如工厂流水线</p><p>​            第一    map    把元素映射为新元素</p><p>​            第二    flatMap    把元素映射为流    把每个元素转换流，把转换之后多个流合并为大的流</p><h5 id="（3）Webflux执行流程和核心API"><a href="#（3）Webflux执行流程和核心API" class="headerlink" title="（3）Webflux执行流程和核心API"></a>（3）Webflux执行流程和核心API</h5><p>​        SpringWebflux基于Reactor，默认容器是Netty，Netty是高性能的NIO框架，异步非阻塞的框架</p><p>​        ①Netty</p><p>​            BIO</p><p>​            NIO</p><p>​        ②SpringWebflux执行过程和SpringMVC相似</p><p>​            SpringWebflux核心控制器DispatchHandler，实现接口WebHandler</p><p>​            接口WebHandler有一个方法handle</p><p>​        ③SpringWebflux里面DispatchHandler，负责请求的处理</p><p>​            HandlerMapping：请求查询到处理的方法</p><p>​            HandlerAdapter：真正负责请求处理</p><p>​            HandlerResultHandler：相应结果处理</p><p>​        ④SpringWebflux实现函数式编程，两个接口：RouterFunction（路由处理）和HandlerFunction（处理函数）</p><h5 id="（4）SpringWebflux（基于注解编程模型）"><a href="#（4）SpringWebflux（基于注解编程模型）" class="headerlink" title="（4）SpringWebflux（基于注解编程模型）"></a>（4）SpringWebflux（基于注解编程模型）</h5><p>​        使用注解编程模式方式，和SpringMVC使用相似，只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用Netty服务器</p><p>​        第一步    创建SpringBoot工程，引入Webflux依赖</p><p>​        第二步    配置启动端口号</p><p>​        第三步    创建包和相关类</p><p>说明：</p><p>​    SpringMVC方式实现，同步阻塞的方式，基于SpringMVC+Servlet+Tomcat</p><p>​    SpringWebflux方式实现，异步非阻塞方式，基于SpringWebflux+Reactor+Netty</p><h5 id="（5）SpringWebflux（基于函数式编程模型）"><a href="#（5）SpringWebflux（基于函数式编程模型）" class="headerlink" title="（5）SpringWebflux（基于函数式编程模型）"></a>（5）SpringWebflux（基于函数式编程模型）</h5><p>​        ①在使用函数式编程模型操作时候，需要自己初始化服务器</p><p>​        ②基于函数式编程模型，有两个核心接口：RouterFunction（实现路由功能，请求转发给对应的handler）和HandlerFunction（处理请求生成响应的函数）。核心任务定义两个函数式接口的实现并且启动需要的服务器。</p><p>​        ③SpringWebflux请求和响应不再是ServletRequest和ServletResponse，而是ServerRequest和ServerResponse</p><p>​        ④使用WebClient调用</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
          <category> Java </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http转https</title>
      <link href="/io/2021/03/23/http%E8%BD%AChttps/"/>
      <url>/io/2021/03/23/http%E8%BD%AChttps/</url>
      
        <content type="html"><![CDATA[<p>要转为https有几个点：</p><p>1，要把证书上传到nginx上面，然后在nginx.conf配置文件里面改SSL证书的路径；</p><p>2，修改nginx.conf配置文件的第一行，将user nobody改为user root;</p><p>3，开放linux的80和443端口供外部访问；</p><p>4，301跳转：在80的server_name下面添加一行return 301 <a href="https://www.l7g1024.com$request_uri,其中域名为自己的域名;/">https://www.l7g1024.com$request_uri，其中域名为自己的域名；</a></p><p>再次访问差不多就能使用https了，详情见百度！</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/io/2021/03/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/io/2021/03/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么选择Kaze主题？"><a href="#为什么选择Kaze主题？" class="headerlink" title="为什么选择Kaze主题？"></a>为什么选择Kaze主题？</h3><p>刚开始建站的时候选择的是蝴蝶那个主题，因为阿比较花哨，后面还改了背景图片，弄了一些相册，好多导航菜单，每一个导航菜单都有一个top_img，当时设计图片的时候倒是挺开心的，就是感觉很有个性，与众不同，到后面部署到服务器的时候不是了，部署以后一访问就发现图片加载的很慢。</p><p>这可不行，后面百度一大堆，怎么加速各种，结果一顿操作下来结果发现要弄图床什么的，这时候我就不乐意了，本来我这个人就不喜欢麻烦，后面看到了羊哥的公众号发了一篇Kaze主题的文章，<a href="https://mp.weixin.qq.com/s/DrEc8FqycC15hp2X010wxQ">文章地址</a>，这时候，我就感觉这文章就是专门写给我看的，后面也看了Kaze的优点如下：</p><ul><li><p>响应式设计，适配桌面端、平板、手机等各种设备</p></li><li><p>前端性能优化，加载快速，眨眼之间即可加载完成</p><ul><li>图片懒加载，应用懒加载技术加快页面的生成速度</li><li>资源压缩，提升本地资源请求速度</li><li>精简设计，不包含 Jquery 等额外库</li></ul></li><li><p>支持侧边栏小组件，例如最近文章，作者卡片</p></li><li><p>暗黑模式，享受黑夜的魅力</p></li><li><p>代码高亮，支持 prismjs</p></li><li><p>公式渲染，支持 katex 和 mathjax</p></li><li><p>评论系统，集成 valine、gitalk 和 livere</p></li><li><p>访问量统计和谷歌分析支持</p></li></ul><p>后面网站访问速度也不慢了，所以就愉快的开始了我的Kaze。</p>]]></content>
      
      
      <categories>
          
          <category> 选择 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
